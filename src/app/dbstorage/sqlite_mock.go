// Code generated by MockGen. DO NOT EDIT.
// Source: app/dbstorage (interfaces: MyDbInter)        

// Package mock_dbstorage is a generated GoMock package.
package dbstorage

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        gorm "gorm.io/gorm"
)

// MockMyDbInter is a mock of MyDbInter interface.
type MockMyDbInter struct {
        ctrl     *gomock.Controller
        recorder *MockMyDbInterMockRecorder
}

// MockMyDbInterMockRecorder is the mock recorder for MockMyDbInter.
type MockMyDbInterMockRecorder struct {
        mock *MockMyDbInter
}

// NewMockMyDbInter creates a new mock instance.
func NewMockMyDbInter(ctrl *gomock.Controller) *MockMyDbInter {
        mock := &MockMyDbInter{ctrl: ctrl}
        mock.recorder = &MockMyDbInterMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMyDbInter) EXPECT() *MockMyDbInterMockRecorder {
        return m.recorder
}

// NewConn mocks base method.
func (m *MockMyDbInter) NewConn() *gorm.DB {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "NewConn")
        ret0, _ := ret[0].(*gorm.DB)
        return ret0
}

// NewConn indicates an expected call of NewConn.
func (mr *MockMyDbInterMockRecorder) NewConn() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConn", reflect.TypeOf((*MockMyDbInter)(nil).NewConn))
}

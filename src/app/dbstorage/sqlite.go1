package dbstorage

import (
	"app/user/models"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type MyDbInter interface {
	NewConn()
	GetConn() *gorm.DB
	Migrate()
}

func NewDB(db MyDbInter) MyDbInter {
	db.NewConn()
	return db
}

type MyDb struct {
	Db *gorm.DB
}

func (d *MyDb) NewConn() {
	conn, err := gorm.Open(sqlite.Open("main.db"), &gorm.Config{})

	if err != nil {
		panic("failed to connect database")
	}

	d.Db = conn
}
func (d *MyDb) GetConn() *gorm.DB {
	return d.Db
}

func (d *MyDb) Migrate() {
	d.Db.AutoMigrate(&models.UserModel{})
}

// type MyMockDb struct {
// 	Db *gorm.DB
// }

// func (d *MyMockDb) NewConn() {
// 	conn, err := gorm.Open(sqlite.Open("test_1.db"), &gorm.Config{})

// 	if err != nil {
// 		panic("failed to connect database")
// 	}

// 	d.Db = conn
// }

// func (d *MyMockDb) GetConn() *gorm.DB {
// 	return d.Db
// }

// func (d *MyMockDb) Migrate() {
// 	d.Db.AutoMigrate(&models.UserModel{})
// }
